module Parse
    (
        parseDest,
        parseOperation,
        parseJump
    ) where

parseDest :: String -> [Int]
parseDest dest = case dest of 
    "M"   -> [0, 0, 1]
    "D"   -> [0, 1, 0]
    "MD"  -> [0, 1, 1]
    "A"   -> [1, 0, 0]
    "AM"  -> [1, 0, 1]
    "AD"  -> [1, 1, 0]
    "AMD" -> [1, 1, 1]
    _     -> [0, 0, 0]

parseOperation :: String -> [Int]
parseOperation oper = case oper of
    "0"     -> [0, 1, 0 ,1, 0, 1, 0]
    "1"     -> [0, 1, 1, 1, 1, 1, 1]
    "-1"    -> [0, 1, 1, 1, 0, 1, 1]
    "D"     -> [0, 0, 0, 1, 1, 0, 0]
    "A"     -> [0, 1, 1, 0, 0, 0, 0]
    "!D"    -> [0, 0, 0, 1, 1, 0, 1]
    "!A"    -> [0, 1, 1, 0, 0, 0, 1]
    "-D"    -> [0, 0, 0, 1, 1, 1, 1]
    "-A"    -> [0, 1, 1, 0, 0, 1, 1]
    "D+1"   -> [0, 0, 1, 1, 1, 1, 1]
    "A+1"   -> [0, 1, 1, 0, 1, 1, 1]
    "D-1"   -> [0, 0, 0, 1, 1, 1, 0]
    "A-1"   -> [0, 1, 1, 0, 0, 1, 0]
    "D+A"   -> [0, 0, 0, 0, 0, 1, 0]
    "D-A"   -> [0, 0, 1, 0, 0, 1, 1]
    "A-D"   -> [0, 0, 0, 0, 1, 1, 1]
    "D&A"   -> [0, 0, 0, 0, 0, 0, 0]
    "D|A"   -> [0, 0, 1, 0, 1, 0, 1]
    "M"     -> [1, 1, 1, 0, 0, 0, 0]
    "!M"    -> [1, 1, 1, 0, 0, 0, 1]
    "-M"    -> [1, 1, 1, 0, 0, 1, 1]
    "M+1"   -> [1, 1, 1, 0, 1, 1, 1] 
    "M-1"   -> [1, 1, 1, 0, 0, 1, 0]
    "D+M"   -> [1, 0, 0, 0, 0, 1, 0]
    "D-M"   -> [1, 0, 1, 0, 0, 1, 1]
    "M-D"   -> [1, 0, 0, 0, 1, 1, 1]
    "D&M"   -> [1, 0, 0, 0, 0, 0, 0]
    "D|M"   -> [1, 0, 1, 0, 1, 0, 1]
    _       -> [0, 0, 0, 0, 0, 0, 0]

parseJump :: String -> [Int]
parseJump jump = case jump of
    "JGT" -> [0, 0, 1]
    "JEQ" -> [0, 1, 0]
    "JGE" -> [0, 1, 1]
    "JLT" -> [1, 0, 0]
    "JNE" -> [1, 0, 1]
    "JLE" -> [1, 1, 0]
    "JMP" -> [1, 1, 1]
    _     -> [0, 0, 0]

